<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.2">Jekyll</generator><link href="https://diehard073055.github.io//sturdy-carnival/feed.xml" rel="self" type="application/atom+xml" /><link href="https://diehard073055.github.io//sturdy-carnival/" rel="alternate" type="text/html" /><updated>2018-07-11T23:09:47+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/</id><title type="html">AWS Developer Associate Notes</title><subtitle>Blog to keep track of what i have been studying for AWS Developer Associate Course. Also will be referrence to study before the exam.</subtitle><entry><title type="html">VPC</title><link href="https://diehard073055.github.io//sturdy-carnival/networking/2018/07/11/VPC.html" rel="alternate" type="text/html" title="VPC" /><published>2018-07-11T00:00:00+10:00</published><updated>2018-07-11T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/networking/2018/07/11/VPC</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/networking/2018/07/11/VPC.html">&lt;h3 id=&quot;what-is-a-vpc&quot;&gt;What is a VPC&lt;/h3&gt;
&lt;p&gt;This of a VPC as a virtual data centre in the cloud.&lt;/p&gt;

&lt;h3 id=&quot;aws-definition&quot;&gt;AWS Definition&lt;/h3&gt;
&lt;p&gt;Amazon Virtual Private Cloud (Amazon VPC) lets you provision a logically isolated section of the Amazon Web Services (AWS) Cloud where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways.&lt;/p&gt;

&lt;p&gt;You can easily customize the network configuration for your Amazon Virtual Private Cloud. For example, you can create a public-facing subnet  for your webservers that has access to the Internet, and place your backend systems such as databases, or application servers in a private facing subnet with no Internet access. You can leverage multiple layers of security, including security groups and network access control lists, to help control access to Amazon EC2 Instances in each subnet.&lt;/p&gt;

&lt;p&gt;Additionally You can create Hardware Virtual Private Cloud (VPN) connection between your coorporate datacenter and your VPC and leverage the AWS cloud as an extension of your corporate datacenter.&lt;/p&gt;

&lt;h3 id=&quot;what-can-you-do-with-vpc&quot;&gt;What can you do with VPC?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Launch instances into a subnet of your choosing.&lt;/li&gt;
  &lt;li&gt;Assign Custom IP address range in each subnet.&lt;/li&gt;
  &lt;li&gt;Configure routing tables between subnets.&lt;/li&gt;
  &lt;li&gt;Create internet gateway and attach it to our VPC.&lt;/li&gt;
  &lt;li&gt;Much better security control over the AWS resources.&lt;/li&gt;
  &lt;li&gt;Instance security groups.&lt;/li&gt;
  &lt;li&gt;Subnet network access control lists (ACLS).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;default-vpc-vs-custom-vpc&quot;&gt;Default VPC vs Custom VPC&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Default VPC is user friendly, allowing you to immedietely deploy instances.&lt;/li&gt;
  &lt;li&gt;All Subnets in the default VPC have a route out to the internet.&lt;/li&gt;
  &lt;li&gt;Each EC2 instance has both public and private IP address.
    &lt;ul&gt;
      &lt;li&gt;If we deploy the instance to a private VPC subnet, the instance will not have any public IP address.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vpc-peering&quot;&gt;VPC Peering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Allows you to connect one VPC with another via direct network route using private IP address.&lt;/li&gt;
  &lt;li&gt;Instances behave as if they were on the same private network.&lt;/li&gt;
  &lt;li&gt;You can peer VPC’s with other AWS accounts as well as with other VPC’s in the same account.&lt;/li&gt;
  &lt;li&gt;Peering is in a star configuration: ie 1 central VPC peers with 4 others. &lt;strong&gt;No Transitive Peering!!&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exam-tips&quot;&gt;Exam Tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Think of VPC as a logical datacenter in AWS.&lt;/li&gt;
  &lt;li&gt;Consists of IGWs (Or Virtual Private Gateways), Route Tables, Network Access Control Lists, Subnets, and Security Groups.&lt;/li&gt;
  &lt;li&gt;1 Subnet = 1 Availability Zone&lt;/li&gt;
  &lt;li&gt;Security Groups are Stateful; Network Access Control Lists are Stateless.&lt;/li&gt;
  &lt;li&gt;No Transitive peering.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="networking" /><category term="vpc" /><category term="cloud data centre" /><category term="firewall" /><summary type="html">What is a VPC This of a VPC as a virtual data centre in the cloud.</summary></entry><entry><title type="html">Route53 - Routing Policies</title><link href="https://diehard073055.github.io//sturdy-carnival/2018/06/25/Route53-Routing-Policies.html" rel="alternate" type="text/html" title="Route53 - Routing Policies" /><published>2018-06-25T00:00:00+10:00</published><updated>2018-06-25T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/2018/06/25/Route53---Routing-Policies</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/2018/06/25/Route53-Routing-Policies.html">&lt;h3 id=&quot;types-of-routing-policies&quot;&gt;Types of Routing Policies&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Simple&lt;/li&gt;
  &lt;li&gt;Weighted&lt;/li&gt;
  &lt;li&gt;Latency&lt;/li&gt;
  &lt;li&gt;Failover&lt;/li&gt;
  &lt;li&gt;Geolocation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;simple&quot;&gt;Simple&lt;/h3&gt;
&lt;p&gt;This is the default routing policy when you create a new record set. This is most commonly used when you have a single resource that performs a given function for your domain, for example, one web server that serves content for the http://acloud.guru website.&lt;/p&gt;

&lt;h3 id=&quot;weighted&quot;&gt;Weighted&lt;/h3&gt;
&lt;p&gt;This allows you to split your traffic based on different weights assigned. For example you can set 10% of your traffic to go to US-EAST-1 and 90% of your traffic to go to EU-WEST-1. This doesnt do it by request, it does via the length of the day. Usually used for testing your new website.&lt;/p&gt;

&lt;h3 id=&quot;latency&quot;&gt;Latency&lt;/h3&gt;
&lt;p&gt;Latency based routing allows you to route your traffic based on the lowest network latency for your end user. ( ie which region will give them the fastest response time). To use latency-based routing you create a latency resource record set for the Amazon EC2 ( or ELB ) resource in each region that hosts your website. When Amazon Route 53 receives a query for your site, it selects the latency resource record set for the region that gives the user the lowest latency. Route53 then responds with the value associated with that resource set.&lt;/p&gt;

&lt;h3 id=&quot;failover&quot;&gt;Failover&lt;/h3&gt;
&lt;p&gt;Failover routing policies are used when you want to create an active/passive setup. For example you may want your primary site to be in EU-WEST-2 and your secondary DR Site in AP-SOUTHEAST-2. Route53 will monitor the health of your primary site using a health check. A health check monitors the health of your endpoints.&lt;/p&gt;

&lt;h3 id=&quot;geolocation&quot;&gt;Geolocation&lt;/h3&gt;
&lt;p&gt;Allows you to direct your traffic to different routes based on the geographic location of your users. ( location from which the DNS queries originate from ). For example, you might want all queries from Europe to be routed to a fleet of EC2 instances that are specifically configured for your European customers. These servers may have the local language of your European customers and all prices are displayed in Euros.&lt;/p&gt;

&lt;h3 id=&quot;dns-exam-tips&quot;&gt;DNS Exam Tips&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Elastic Load Balancers never have an ipv4 address.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Understand the difference between an Alias Record and a CNAME.&lt;/li&gt;
  &lt;li&gt;If youre ever given the choice, always choose an Alias Record over a CNAME, because it dosent cost money.&lt;/li&gt;
  &lt;li&gt;Remember the different routing polices.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Types of Routing Policies Simple Weighted Latency Failover Geolocation</summary></entry><entry><title type="html">DNS 101</title><link href="https://diehard073055.github.io//sturdy-carnival/networking/2018/06/24/DNS-101.html" rel="alternate" type="text/html" title="DNS 101" /><published>2018-06-24T00:00:00+10:00</published><updated>2018-06-24T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/networking/2018/06/24/DNS-101</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/networking/2018/06/24/DNS-101.html">&lt;ul&gt;
  &lt;li&gt;DNS is used to convert human friendly names, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;https://google.com&lt;/code&gt; into an Internet Protocol Address such as &lt;code class=&quot;highlighter-rouge&quot;&gt;https://92.93.94.95&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;IP addresses are used by computers to identify each other on the network. IP addresses commonly come in 2 different forms, IPv4 and IPv6.&lt;/li&gt;
  &lt;li&gt;IPv4 address space is a 32 bit field and has over 4 billion different addresses.&lt;/li&gt;
  &lt;li&gt;IPv6 address space is a 128 bit field and has over 340 undecillion addresses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;top-level-domains&quot;&gt;Top Level Domains&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The last word in a domain name represents the “top level domain”.
    &lt;ul&gt;
      &lt;li&gt;.com&lt;/li&gt;
      &lt;li&gt;.edu&lt;/li&gt;
      &lt;li&gt;.gov&lt;/li&gt;
      &lt;li&gt;.me&lt;/li&gt;
      &lt;li&gt;.io&lt;/li&gt;
      &lt;li&gt;.org&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The second word in a domain name represents the second level domain name” &lt;em&gt;optional and depends on the domain.&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;.&lt;strong&gt;co&lt;/strong&gt;.uk&lt;/li&gt;
      &lt;li&gt;.&lt;strong&gt;gov&lt;/strong&gt;.uk&lt;/li&gt;
      &lt;li&gt;.&lt;strong&gt;com&lt;/strong&gt;.au&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;domain-registrars&quot;&gt;Domain Registrars&lt;/h3&gt;
&lt;p&gt;A registrar is an authority that can assign domain names directly under one or more top-level domains. These domains are registered with InterNIC, a service of ICANN, which enforces uniqueness of domain names across the Internet. Each domain name becomes registered in a central database known as the WhoIS database.&lt;/p&gt;

&lt;h3 id=&quot;soa-records&quot;&gt;SOA Records&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Start Of Authrority Records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The SOA Record Stores Information About&lt;/em&gt;;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The name of the server that supplied the data for the zone.&lt;/li&gt;
  &lt;li&gt;The administrator of the zone.&lt;/li&gt;
  &lt;li&gt;The current version of the zone.&lt;/li&gt;
  &lt;li&gt;The number of seconds a secondary name server should wait before checking for updates.&lt;/li&gt;
  &lt;li&gt;The number of seconds a secondary name server should wait before retrying a failed zone transfer.&lt;/li&gt;
  &lt;li&gt;The maximum number of seconds that a secondary name server can use data before it must either be refreshed or expire.&lt;/li&gt;
  &lt;li&gt;The default number of seconds for the time-to-live file on resource records.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ns-records&quot;&gt;NS Records&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;NS stands for Name Server Records.&lt;/li&gt;
  &lt;li&gt;Used by Top Level Domain servers to direct traffic to Content DNS server which contains authoritative DNS records.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-records&quot;&gt;A Records&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The A record is the fundemental type of DNS record and the “A” in A record stands for “Address”.&lt;/li&gt;
  &lt;li&gt;The A record is used by a computer to translate the name of the domain to the IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elastic load balancers never have an IPv4 / IPv6 Address, they always have a DNS name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ttl-record&quot;&gt;TTL Record&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The length that a DNS record is cached on either the Resolving Server or the users own local PC is equal to the value of the “Time To Live” (TTL) in seconds.&lt;/li&gt;
  &lt;li&gt;The lower the time to live, the faster changes to DNS records take to propagate through the internet.&lt;/li&gt;
  &lt;li&gt;When migrating to different servers, always remember to lower the TTL to 300 seconds ( 5 minutes ) since 2 days before the migration, since by default the TTL is set to 2 days.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cnames&quot;&gt;CNAMES&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A Canonical Name ( CName ) can be used to resolve one domain name to another.&lt;/li&gt;
  &lt;li&gt;For example, you may have a mobile website with the domain name http://m.acloud.guru that is used for when users browse to your domain name on their mobile devices. You may also want the name http://mobile.acloud.guru to resolve this same address.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;alias-records&quot;&gt;Alias Records&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Alias Records are used to map resource record sets in your hosted zone to Elastic Load Balancers, CloudFront distributions, or S3 buckets that are configured as websites.&lt;/li&gt;
  &lt;li&gt;Alias Records work like CNAME record in that you can map one DNS name (www.example.com) to another &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; DNS name (elb1234.elb.amazonaws.com).&lt;/li&gt;
  &lt;li&gt;Key difference - A CNAME cant be used for naked domain names (zone apex record)&lt;/li&gt;
  &lt;li&gt;You cant have a CNAME for http://acloud.guru, it must be either an A record or an Alias.&lt;/li&gt;
  &lt;li&gt;Alias resource record sets can save you time because Amazon Route53 automatically recognizes changes in the record sets that the alias resource record set refers to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exam-tips&quot;&gt;Exam Tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ELB’s do not have a predefined public IPv4 addresses, you resolve them using a DNS name.&lt;/li&gt;
  &lt;li&gt;Understand the difference between as Alias Record and a CNAME.&lt;/li&gt;
  &lt;li&gt;Given the choice always choose an Alias Record over a CNAME.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="networking" /><category term="dns" /><category term="ip" /><category term="resolve" /><category term="route53" /><summary type="html">DNS is used to convert human friendly names, such as https://google.com into an Internet Protocol Address such as https://92.93.94.95. IP addresses are used by computers to identify each other on the network. IP addresses commonly come in 2 different forms, IPv4 and IPv6. IPv4 address space is a 32 bit field and has over 4 billion different addresses. IPv6 address space is a 128 bit field and has over 340 undecillion addresses.</summary></entry><entry><title type="html">CloudFormation</title><link href="https://diehard073055.github.io//sturdy-carnival/2018/06/23/CloudFormation.html" rel="alternate" type="text/html" title="CloudFormation" /><published>2018-06-23T00:00:00+10:00</published><updated>2018-06-23T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/2018/06/23/CloudFormation</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/2018/06/23/CloudFormation.html">&lt;h3 id=&quot;what-is-cloudformation-&quot;&gt;What is CloudFormation ?&lt;/h3&gt;
&lt;p&gt;One of the most powerful parts of AWS, CloudFormation allows you to take what was once traditional hardware infrastructure and convert it into code.&lt;/p&gt;

&lt;p&gt;CloudFormation gives developers and system administrators an way to create and manage a collection of related AWS resources, provisioning and updating them in an orderly and predictable fashion.&lt;/p&gt;

&lt;p&gt;You dont need to figure out the order for provisioning AWS services or the subtleties of making those dependencies work. CloudFormation takes care of this for you.&lt;/p&gt;

&lt;p&gt;After the AWS resources are deployed, you can modify and update them in a controlled and prdictable way, in effect &lt;strong&gt;applying version control to your AWS infrastructure the same way you do with your software.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Cloud Formation Template&lt;/strong&gt; is essentially an architectural diagram and a &lt;strong&gt;Cloud Formation Stack&lt;/strong&gt; is the end result of that diagram (i.e. what is actually provisioned ).&lt;/p&gt;

&lt;p&gt;You create, update, and delete a collection of resources by creating, updating, and deleting stacks using CloudFormation templates.&lt;/p&gt;

&lt;p&gt;CloudFormation templates are in &lt;strong&gt;JSON&lt;/strong&gt; format or &lt;strong&gt;YAML&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;elements-of-a-template&quot;&gt;Elements of a template&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mandatory Elements&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;List of AWS Resources and their associated configuration values.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optional Elements
    &lt;ul&gt;
      &lt;li&gt;The template’s file format &amp;amp; version number&lt;/li&gt;
      &lt;li&gt;Template Parameters
        &lt;ul&gt;
          &lt;li&gt;The input values that are supplied at stack creation time. Limit of 60.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Output values
    &lt;ul&gt;
      &lt;li&gt;The output values required once a stack has finished building ( such as the Public IP address, ELB address, etc) Limit of 60.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List of data tables
    &lt;ul&gt;
      &lt;li&gt;Use to look up static configuration values such as AMI’s etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;simple-template&quot;&gt;Simple Template&lt;/h3&gt;
&lt;p&gt;JSON&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HelloBucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS::S3::Bucket&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;YAML&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;HelloBucket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AWS::S3::Bucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;outputting-data&quot;&gt;Outputting Data&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;You can use Fn:GetAtt to output data.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PublicIP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Public IP address of the web server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Fn::GetAtt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;WebServerHost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PublicIp&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exam-tips&quot;&gt;Exam Tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;By default the &lt;em&gt;“automatic rollback on error”&lt;/em&gt; ferature is &lt;strong&gt;ENABLED&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You are &lt;strong&gt;CHARGED&lt;/strong&gt; for errors.&lt;/li&gt;
  &lt;li&gt;CloudFormation is free.&lt;/li&gt;
  &lt;li&gt;Stacks can wait for applications to be provisioned using the &lt;em&gt;“WaitCondition”&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;You can use the function &lt;em&gt;Fn:GetAtt&lt;/em&gt; to output data.&lt;/li&gt;
  &lt;li&gt;Route53 completely supported. This includes creating &lt;em&gt;new&lt;/em&gt; hosted zones or &lt;em&gt;updating&lt;/em&gt; existing ones.
    &lt;ul&gt;
      &lt;li&gt;You can create A Records, Aliases etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IAM Role Creation and Assignment is also supported.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If customer is new to AWS use ElasticBeanstalk.&lt;/li&gt;
  &lt;li&gt;If customer wants to convert their infrastructure into code, use CloudFormation.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">What is CloudFormation ? One of the most powerful parts of AWS, CloudFormation allows you to take what was once traditional hardware infrastructure and convert it into code.</summary></entry><entry><title type="html">Simple Workflow Service</title><link href="https://diehard073055.github.io//sturdy-carnival/workflow/2018/06/22/Simple-Workflow-Service.html" rel="alternate" type="text/html" title="Simple Workflow Service" /><published>2018-06-22T00:00:00+10:00</published><updated>2018-06-22T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/workflow/2018/06/22/Simple-Workflow-Service</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/workflow/2018/06/22/Simple-Workflow-Service.html">&lt;p&gt;Amazon Simple Workflow Service (Amazon SWF) is a web service that makes it easy to coordinate work across distributed application components. Amazon SWF enables applications for a range of use cases, including media processing, web application back-ends, business process workflows, and analytics pipelines, to be designed as a coordination of tasks.&lt;/p&gt;

&lt;p&gt;Tasks represent invocations of various processing steps in an application which can be performed by executable code, web service calls, human actions, and scripts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Worker are programs that interact with amazon SWF to get tasks.
    &lt;ul&gt;
      &lt;li&gt;Process received tasks and return results.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A decider is a program that controls the coordination of tasks, ie: their ordering, concurrency, and scheduling according to the application logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The workers can run on EC2 instances or on machines behind firewalls. Amazon SWF brokers the interactions between workers and deciders. Allows deciders to get consistent views into the progress of tasks and to initiate new tasks in an ongoing manner.&lt;/p&gt;

&lt;p&gt;At the same Amazon SWF stores tasks, assigns them to workers when are ready, and monitors their progress. &lt;strong&gt;It ensures that a task is assigned only once and is never duplicated.&lt;/strong&gt; Since Amazon SWF maintains the applications state durably, workers and deciders dont have to keep track of execution state. They can run independently, and scale quickly.&lt;/p&gt;

&lt;p&gt;All your SWF activities are all scoped into a domain. Domains Isolate a set of types, execution, and tasks list from others within the same account.
&lt;em&gt;You can register a domain by using the AWS Management Console or by using the RegisterDomain action in the Amazon SWF API.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parameters are defined in JSON&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Maximum Workflow can be 1 year and the value is measured in seconds&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;swf-vs-sqs&quot;&gt;SWF vs SQS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Amazon SWF presents a task-oriented API, whereas Amazon SQS offers a message-oriented API.&lt;/li&gt;
  &lt;li&gt;SWF ensures task is executed only once, where as SQS you have to handle duplicated messages.&lt;/li&gt;
  &lt;li&gt;SWF keeps track of all the tasks and events in an application, whereas SQS you have to keep track of all the tasks and events.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="workflow" /><category term="taskmanager" /><summary type="html">Amazon Simple Workflow Service (Amazon SWF) is a web service that makes it easy to coordinate work across distributed application components. Amazon SWF enables applications for a range of use cases, including media processing, web application back-ends, business process workflows, and analytics pipelines, to be designed as a coordination of tasks.</summary></entry><entry><title type="html">Simple Queue Service</title><link href="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/Simple-Queue-Service.html" rel="alternate" type="text/html" title="Simple Queue Service" /><published>2018-06-22T00:00:00+10:00</published><updated>2018-06-22T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/Simple-Queue-Service</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/Simple-Queue-Service.html">&lt;p&gt;Amazon SQS is a web service that gives you access to a message queue that can be used to store messages while waiting for a computer to process them. Amazon SQS is a distributed queue system that enables web service applications to quickly and reliably queue messages that one component in the application generates to be consumed by another component. A queue is a temporary repository for messages that are awaiting processing.&lt;/p&gt;

&lt;p&gt;Using amazon SQS, you can decouple the components of an application so they run independently, with Amazon SQS easing message management between components. Any component of a distributed application can store messages in a fail-safe queue.&lt;/p&gt;

&lt;p&gt;Messages can contain upto 256KB of text in any format. Any component can later retrieve the messages programmatically using the Amazon SQS API. The queue act as a buffer between the component producing and saving data, and the component receiving the data for processing. This means the queue resolves issues that arise if the producer is producing work faster than the consumer can process it, or if the producer or consumer are only intermittently connected to the network.&lt;/p&gt;

&lt;p&gt;Amazon SQS ensures delivery of each message at least once, and supports multiple readers and writers interacting with the same queue. A single queue can be used simultaneously by many distributed application components, with no need for those components to coordinate with each other to share the queue.&lt;/p&gt;

&lt;p&gt;Amazon SQS is engineered to always be available and deliver messages. One of the resulting tradeoffs is that SQS does not guarantee first in, first out delivery of messages. For many distributed applications, each message can stand on its own, and as long as all messages are delivered, the order is not important.&lt;/p&gt;

&lt;p&gt;If your system requires that the order be preserved, you can place sequencing information in each message, so that you can reorder the messages when the queue returns them.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Suppose you have a number of images which needs to be encoded, In an amazon SQS worker queue, you can create an SQS message for each file specifying the command (jpeg-encode) and the location of the file in amazon s3. A pool of EC2 instances running the needed image processing software does the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Asynchonously pull the task messages from the queue. ( polling from the queue ).&lt;/li&gt;
  &lt;li&gt;Retrieves the named file.&lt;/li&gt;
  &lt;li&gt;Processes the conversion.&lt;/li&gt;
  &lt;li&gt;Writes the image back to S3&lt;/li&gt;
  &lt;li&gt;Writes the “task-complete” message to another queue.&lt;/li&gt;
  &lt;li&gt;Deletes the original task message.&lt;/li&gt;
  &lt;li&gt;Checks for more messages in the working queue.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can enable auto scaling depending on the size of the queue. More messages in the queue, more ec2 instances you spin up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;exam-tips&quot;&gt;Exam Tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Does not offer FIFO.&lt;/li&gt;
  &lt;li&gt;12 hours visibility timeout.&lt;/li&gt;
  &lt;li&gt;Will deliver messages at least once, most of the time it does deliver your messages exactly once. Design your applications so that even if it did deliver the message more than once, it doesnt create errors.&lt;/li&gt;
  &lt;li&gt;256KB message sizes now available.&lt;/li&gt;
  &lt;li&gt;Billed at 64KB chunks.&lt;/li&gt;
  &lt;li&gt;256 KB messages will be billed at 64 x 4.&lt;/li&gt;
  &lt;li&gt;First 1 million amazon SQS requests are free.&lt;/li&gt;
  &lt;li&gt;$0.50 per 1 million Amazon SQS Requests per month thereafter.&lt;/li&gt;
  &lt;li&gt;A single request can have from 1 to 10 messages, up to a maximum total payload of 256KB.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="sqs" /><category term="messaging" /><category term="polling" /><summary type="html">Amazon SQS is a web service that gives you access to a message queue that can be used to store messages while waiting for a computer to process them. Amazon SQS is a distributed queue system that enables web service applications to quickly and reliably queue messages that one component in the application generates to be consumed by another component. A queue is a temporary repository for messages that are awaiting processing.</summary></entry><entry><title type="html">Simple Notification Service</title><link href="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/Simple-Notification-Service.html" rel="alternate" type="text/html" title="Simple Notification Service" /><published>2018-06-22T00:00:00+10:00</published><updated>2018-06-22T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/Simple-Notification-Service</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/Simple-Notification-Service.html">&lt;ul&gt;
  &lt;li&gt;Web service that makes it easy to setup, operate, and send notifications from the cloud.&lt;/li&gt;
  &lt;li&gt;Provides developers with a highly scaleable, flexible and cost effective capability to publish messages from an application and immedietely deliver them to the subscribers.&lt;/li&gt;
  &lt;li&gt;Follows the “pub-sub” paradigm - using a “push” mechanism. &lt;em&gt;no need for polling&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Pay as you go pricing.&lt;/li&gt;
  &lt;li&gt;Email &amp;amp; SMS&lt;/li&gt;
  &lt;li&gt;Push notifications to Apple, Google, FireOS, and Windows Devices, as well as Android Devices with Baidu Cloud Push.&lt;/li&gt;
  &lt;li&gt;SQS and any HTTP endpoint.&lt;/li&gt;
  &lt;li&gt;Stored in multiple availability zones. - prevents messages being lost.&lt;/li&gt;
  &lt;li&gt;Allows you to group multiple recipients using topics.&lt;/li&gt;
  &lt;li&gt;One topic can support deliveries to multiple endpoints ( Will be formatted Appropriately )
    &lt;ul&gt;
      &lt;li&gt;iOS&lt;/li&gt;
      &lt;li&gt;Android&lt;/li&gt;
      &lt;li&gt;SMS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Instantaneous, Pushbased Delivery&lt;/li&gt;
  &lt;li&gt;Simple API’s and easy integration with applications.&lt;/li&gt;
  &lt;li&gt;Flexible message delivery over multiple transport protocols.&lt;/li&gt;
  &lt;li&gt;Inexpensive, pay-as-you-go model with no up-front costs.&lt;/li&gt;
  &lt;li&gt;Web-based AWS Management Console offers the simplicity of a point-and-click interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sns-vs-sqs&quot;&gt;SNS vs SQS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Both messaging services in AWS&lt;/li&gt;
  &lt;li&gt;SNS - Push&lt;/li&gt;
  &lt;li&gt;SQS - Pull ( Polls )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pricing&quot;&gt;Pricing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;$0.50 per 1 million SNS Requests&lt;/li&gt;
  &lt;li&gt;$0.06 per 100,000 Notification Deliveries over HTTP&lt;/li&gt;
  &lt;li&gt;$0.75 per 100 Notification deliveries over SMS&lt;/li&gt;
  &lt;li&gt;$2.00 per 100,000 Notification deliveries over Email
&lt;em&gt;Number of requests + delivery mechanism&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;SNS dataype = JSON&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Eshan Shafeeq</name></author><category term="messaging" /><category term="notification" /><category term="sns" /><summary type="html">Web service that makes it easy to setup, operate, and send notifications from the cloud. Provides developers with a highly scaleable, flexible and cost effective capability to publish messages from an application and immedietely deliver them to the subscribers. Follows the “pub-sub” paradigm - using a “push” mechanism. no need for polling. Pay as you go pricing. Email &amp;amp; SMS Push notifications to Apple, Google, FireOS, and Windows Devices, as well as Android Devices with Baidu Cloud Push. SQS and any HTTP endpoint. Stored in multiple availability zones. - prevents messages being lost. Allows you to group multiple recipients using topics. One topic can support deliveries to multiple endpoints ( Will be formatted Appropriately ) iOS Android SMS</summary></entry><entry><title type="html">SQS Summary</title><link href="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/SQS-Summary.html" rel="alternate" type="text/html" title="SQS Summary" /><published>2018-06-22T00:00:00+10:00</published><updated>2018-06-22T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/SQS-Summary</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/SQS-Summary.html">&lt;ul&gt;
  &lt;li&gt;SQS messages can be delivered multiple times and in any order.&lt;/li&gt;
  &lt;li&gt;Default visibility is 30 seconds.&lt;/li&gt;
  &lt;li&gt;Maximum timeout is 12 hours.&lt;/li&gt;
  &lt;li&gt;If you wish to extend the message visibility since the timeout is not enough to fully process and delete the message, you can use &lt;strong&gt;Change Message Visibility&lt;/strong&gt; action to specify a new timeout value. Amazon SQS restarts the timeout period using the new value.&lt;/li&gt;
  &lt;li&gt;SQS long polling dosent return a response until a message arrives in the queue, or the long poll times out. SQS long polling makes it easy and inexpensive to retrieve messages from your SQS queue as soon as they are available. &lt;em&gt;Maximum long poll timeout = 20 seconds&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-question&quot;&gt;Example Question&lt;/h5&gt;
&lt;p&gt;Polling in a tight loops is burning CPU cycles and costing the company money. How could you fix this?
&lt;strong&gt;Enable long polling&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;fanning-out-sqs&quot;&gt;Fanning out SQS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create an SNS topic in SNS.&lt;/li&gt;
  &lt;li&gt;Create and subscribe multiple SQS queues to the SNS topic.
When ever a message is sent to the SNS topic, the message will be fanned out to the SQS queues. SNS will deliver the message to all the SQS queues that are subsribed to the topic.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="summary" /><category term="sqs" /><category term="examtips" /><summary type="html">SQS messages can be delivered multiple times and in any order. Default visibility is 30 seconds. Maximum timeout is 12 hours. If you wish to extend the message visibility since the timeout is not enough to fully process and delete the message, you can use Change Message Visibility action to specify a new timeout value. Amazon SQS restarts the timeout period using the new value. SQS long polling dosent return a response until a message arrives in the queue, or the long poll times out. SQS long polling makes it easy and inexpensive to retrieve messages from your SQS queue as soon as they are available. Maximum long poll timeout = 20 seconds</summary></entry><entry><title type="html">SNS Summary</title><link href="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/SNS-Summary.html" rel="alternate" type="text/html" title="SNS Summary" /><published>2018-06-22T00:00:00+10:00</published><updated>2018-06-22T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/SNS-Summary</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/messaging/2018/06/22/SNS-Summary.html">&lt;ul&gt;
  &lt;li&gt;Instantaneous, push-based delivery (polling)&lt;/li&gt;
  &lt;li&gt;Protocols include
    &lt;ul&gt;
      &lt;li&gt;HTTP&lt;/li&gt;
      &lt;li&gt;HTTPS&lt;/li&gt;
      &lt;li&gt;Email&lt;/li&gt;
      &lt;li&gt;Email JSON&lt;/li&gt;
      &lt;li&gt;Amazon SQS&lt;/li&gt;
      &lt;li&gt;Application&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Messages can be customized for each protocol.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="summary" /><category term="sns" /><category term="messaging" /><category term="push" /><summary type="html">Instantaneous, push-based delivery (polling) Protocols include HTTP HTTPS Email Email JSON Amazon SQS Application Messages can be customized for each protocol.</summary></entry><entry><title type="html">Elastic Beanstalk</title><link href="https://diehard073055.github.io//sturdy-carnival/loadbalancer/2018/06/22/Elastic-Beanstalk.html" rel="alternate" type="text/html" title="Elastic Beanstalk" /><published>2018-06-22T00:00:00+10:00</published><updated>2018-06-22T00:00:00+10:00</updated><id>https://diehard073055.github.io//sturdy-carnival/loadbalancer/2018/06/22/Elastic-Beanstalk</id><content type="html" xml:base="https://diehard073055.github.io//sturdy-carnival/loadbalancer/2018/06/22/Elastic-Beanstalk.html">&lt;ul&gt;
  &lt;li&gt;Deploy, monitor and scale applications quickly.&lt;/li&gt;
  &lt;li&gt;Provides developers or end users with the ability to provision application infrastructure in an almost transparent manner.&lt;/li&gt;
  &lt;li&gt;Gui for AWS&lt;/li&gt;
  &lt;li&gt;Highly abstract focus towards infrastructure, focusing on components and performance - not configuration and specifications.&lt;/li&gt;
  &lt;li&gt;Significantly simplify infrastructure management, allowing applications to be deployed into infrastructure environments easily.&lt;/li&gt;
  &lt;li&gt;Primarily aimed at beginners.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-architecture-components&quot;&gt;Key Architecture Components&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Applications are high level structure in beanstalk.&lt;/li&gt;
  &lt;li&gt;Either your entier application, is one EB application.&lt;/li&gt;
  &lt;li&gt;Each logical component of your application can be an EB application or a EB environment within an application.&lt;/li&gt;
  &lt;li&gt;Applications can have multiple environments ( Prod, Staging, Dev, V1, V2, V1.1 or functional type [ backend, frontend] )&lt;/li&gt;
  &lt;li&gt;Environments are either single instances or scalable.&lt;/li&gt;
  &lt;li&gt;Environments are either web server environments or worker environments.&lt;/li&gt;
  &lt;li&gt;Application versions are unique packages which represent versions of apps.&lt;/li&gt;
  &lt;li&gt;An application is uploaded to Elastic beanstalk as a application bundle - .zip&lt;/li&gt;
  &lt;li&gt;Each ‘application’ can have many different versions 1:M relationship.&lt;/li&gt;
  &lt;li&gt;Application versions can be deployed to environments within an Application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-configurations-options&quot;&gt;Key configurations options&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;PHP&lt;/li&gt;
  &lt;li&gt;.NET&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Nodejs&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Go&lt;/li&gt;
  &lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can do both application level updates, as well as configuration level updates. These can be rolling updates, all at once, one instance at a time, also do them by a percentage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Elastic Beanstalk is a free service. But the services you provision from elastic beanstalk, the pricing depends on what you provision.&lt;/p&gt;

&lt;h3 id=&quot;exam-tips&quot;&gt;Exam Tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You can have multiple versions of your application.&lt;/li&gt;
  &lt;li&gt;You appplications can be split into tiers ( Web Tier / Application Tier / Database Tier ).&lt;/li&gt;
  &lt;li&gt;You can update your application.&lt;/li&gt;
  &lt;li&gt;You can update the configuration.&lt;/li&gt;
  &lt;li&gt;Updates can be 1 instance at a time, a % of instances or an immutable update.&lt;/li&gt;
  &lt;li&gt;You pay for the resources that you use, but elastic beanstalk is free.&lt;/li&gt;
  &lt;li&gt;If elastic beanstalk creates your RDS database then it will delete it when you delete your application. If not then the RDS instance stays.&lt;/li&gt;
  &lt;li&gt;Languages supported
    &lt;ul&gt;
      &lt;li&gt;Apache Tomcat for Java applications&lt;/li&gt;
      &lt;li&gt;Apache HTTP Server for PHP applications&lt;/li&gt;
      &lt;li&gt;Apacahe HTTP Server for Python applications&lt;/li&gt;
      &lt;li&gt;Nginx or Apache HTTP Server for Nodejs applications&lt;/li&gt;
      &lt;li&gt;Passenger or Puma for Ruby applications&lt;/li&gt;
      &lt;li&gt;Microsoft IIS, 7.5, 8.0, and 8.5 for .NET applications.&lt;/li&gt;
      &lt;li&gt;Java SE&lt;/li&gt;
      &lt;li&gt;Docker&lt;/li&gt;
      &lt;li&gt;Go&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Eshan Shafeeq</name></author><category term="loadbalancers" /><category term="elastic" /><category term="elasticbeanstalk" /><category term="scale" /><category term="webapps" /><summary type="html">Deploy, monitor and scale applications quickly. Provides developers or end users with the ability to provision application infrastructure in an almost transparent manner. Gui for AWS Highly abstract focus towards infrastructure, focusing on components and performance - not configuration and specifications. Significantly simplify infrastructure management, allowing applications to be deployed into infrastructure environments easily. Primarily aimed at beginners.</summary></entry></feed>